/*
 * halFLASH_stm32f103.c
 *
 *  Created on: 12 апр. 2017 г.
 *      Author: Maksim
 */

#include "halFLASH.h"
#include "stm32f1xx_hal.h"

#include "string.h"
#include "stdlib.h"

#define FIRST_PAGE_ADDRESS  0x08000000

#define PAGE_SIZE 1024

#define PAGE_COUNT 64

void halFlash_Init(void) {

	/* Enable Prefetch Buffer */
	FLASH_PrefetchBufferCmd( FLASH_PrefetchBuffer_Enable);

	/* Flash 2 wait state */
	FLASH_SetLatency( FLASH_Latency_2);

}

uint8_t halFlash_WritePage(uint8_t PageNumber, uint8_t *DataPointer, uint16_t DataCount) {
	uint32_t *WriteDataPointer;
	uint16_t DataCounter;
	uint8_t returnState = 1;
	FLASH_Status WriteStatus = FLASH_COMPLETE;

	if(PageNumber < PAGE_COUNT && DataCount <= PAGE_SIZE) {

		WriteDataPointer = (uint32_t *)malloc(DataCount);

		if(WriteDataPointer != NULL) {

			memcpy(WriteDataPointer, DataPointer, DataCount);

			HAL_FLASH_Unlock();

			FLASH_EraseInitTypeDef flash_erase;

			flash_erase.TypeErase = TYPEERASE_PAGES;

			flash_erase.Banks = 0;

			flash_erase.NbPages = 1;

			flash_erase.PageAddress = FIRST_PAGE_ADDRESS + PageNumber * PAGE_SIZE;

			uint32_t page_error;

			if(HAL_FLASHEx_Erase(&flash_erase, &page_error) == HAL_OK) {

				for (DataCounter = 0; DataCounter < (DataCount / 4); DataCounter++) {

					if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)(FIRST_PAGE_ADDRESS + PageNumber * PAGE_SIZE + DataCounter * 4), *(WriteDataPointer + DataCounter) ) != HAL_OK) {

						returnState = 1;

						break;

					} else {

						returnState = 0;

					}


				}

				free((void *)WriteDataPointer);

			}

			HAL_FLASH_Lock();

		} else {

			returnState = 1;

		}


	} else {

		returnState = 1;

	}

	return returnState;

}

uint8_t halFlash_ReadPage(uint8_t PageNumber, uint8_t *DataPointer, uint16_t DataCount) {
	uint8_t returnState = 1;

	if(PageNumber < PAGE_COUNT && DataCount <= PAGE_SIZE) {

		memcpy((void *)DataPointer, (void *)(FIRST_PAGE_ADDRESS + PageNumber * PAGE_SIZE), DataCount);

		returnState = 0;

	} else {

		returnState = 1;

	}

	return returnState;
}


