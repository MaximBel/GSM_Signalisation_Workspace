/*
 * io.c
 *
 *  Created on: 13 θών. 2018 γ.
 *      Author: Max
 */

#include "FreeRTOS.h"
#include "task.h"
#include "io.h"
#include "main.h"
#include "stm32f1xx_hal.h"

#define BUZZER_PERIOD_ACTIVE 700

#define BUZZER_PERIOD_PASSIVE 500

#define BUTTON_UPDATE_COUNT 20

#define BUTTON_PRESS_OFFSET (BUTTON_UPDATE_COUNT * 0.8)

typedef enum {
	BuzzerPhase_Active,
	BuzzerPhase_Passive
} BuzzerPhase_t;

static const uint8_t sig_patterns[11] = {



};


static BuzzerPhase_t buzzer_phase = BuzzerPhase_Passive;

static io_handlers_t io_handlers;

static Buzzer_state_t buzzer_state = Buzzer_Off;

static volatile uint8_t seg_buffer[3];


static void io_handler(void *pvParameters);

static void buzzer_run(void);

static void button_run(void);

static void ssi_run(void);

uint8_t io_init(io_handlers_t *handlers) {

	if(handlers->ButtonHandler == NULL ||
			handlers->DoorHandler == NULL) {

		return 1;

	}

	memcpy(&io_handlers, handlers, sizeof(io_handlers_t));

	xTaskCreate(io_handler, "IO handler", configMINIMAL_STACK_SIZE * 5, NULL, 1, NULL);

}

void ToggleBuzzer(Buzzer_state_t newState);

void SetSSI(uint8_t seg1, uint8_t seg2, uint8_t seg3, uint8_t dots);





static void io_handler(void *pvParameters) {

	while(1) {

		buzzer_run();

		button_run();

		vTaskDelay(10);


	}


}

static void buzzer_run(void) {
	static uint32_t next_phase_change = 0;

	if (buzzer_state == Buzzer_Pulse && xTaskGetTickCount() > next_phase_change) {

		switch (buzzer_phase) {

		case BuzzerPhase_Active:

			next_phase_change = xTaskGetTickCount() + BUZZER_PERIOD_ACTIVE;

			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);

			buzzer_phase = BuzzerPhase_Passive;

			break;

		case BuzzerPhase_Passive:

			next_phase_change = xTaskGetTickCount() + BUZZER_PERIOD_PASSIVE;

			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);

			buzzer_phase = BuzzerPhase_Active;

			break;

		default:

			next_phase_change = xTaskGetTickCount() + BUZZER_PERIOD_PASSIVE;

			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);

			buzzer_phase = BuzzerPhase_Active;

		}

	} else {

		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);

	}

}

static void button_run(void) {
	static uint8_t checkCount[4] = { 0, 0, 0, 0 };;
	static uint8_t updateCounter = 0;

	if(updateCounter < BUTTON_UPDATE_COUNT) {

		checkCount[0] += (HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin) != 0) ? 1 : 0;

		checkCount[1] += (HAL_GPIO_ReadPin(buttonA7_GPIO_Port, buttonA7_Pin) != 0) ? 1 : 0;

		checkCount[2] += (HAL_GPIO_ReadPin(buttonB0_GPIO_Port, buttonB0_Pin) != 0) ? 1 : 0;

		checkCount[3] += (HAL_GPIO_ReadPin(buttonB1_GPIO_Port, buttonB1_Pin) != 0) ? 1 : 0;

		updateCounter++;

	} else {

		if(io_handlers.ButtonHandler != NULL) {

			if(checkCount[0] > BUTTON_PRESS_OFFSET) {
				io_handlers.ButtonHandler(0);
			}

			if(checkCount[1] > BUTTON_PRESS_OFFSET) {
				io_handlers.ButtonHandler(1);
			}

			if(checkCount[2] > BUTTON_PRESS_OFFSET) {
				io_handlers.ButtonHandler(2);
			}

			if(checkCount[3] > BUTTON_PRESS_OFFSET) {
				io_handlers.ButtonHandler(3);
			}

		}

		checkCount[0] = 0;
		checkCount[1] = 0;
		checkCount[2] = 0;
		checkCount[3] = 0;

		updateCounter = 0;

	}

}

static void ssi_run(void) {



}
